Absolutely, Atharva! Let's dry run the code step-by-step for the array:

> `nums = [1, 2, 3, -3, 1, 1, 1]`, `k = 3`

We’ll track:

* `i` = current index
* `num` = current number
* `sum` = prefix sum up to this point
* `sum - k` check
* Count added
* Subarray(s) that were found

We also maintain a `map` of prefix sum frequencies:
`map = {}` initially, but we set `map[0] = 1` to handle subarrays that start from index 0.

---

### 🔁 Initial Setup:

```java
map = {0: 1}
sum = 0
count = 0
```

---

### ✅ Step 0: i = 0, num = 1

* sum = 0 + 1 = 1
* sum - k = 1 - 3 = -2 → not in map
* No subarray found
* map = {0:1, 1:1}

---

### ✅ Step 1: i = 1, num = 2

* sum = 1 + 2 = 3
* sum - k = 3 - 3 = 0 → map\[0] = 1 ✅
* ✔️ Subarray found: `[1, 2]`
* count += 1 → count = 1
* map = {0:1, 1:1, 3:1}

---

### ✅ Step 2: i = 2, num = 3

* sum = 3 + 3 = 6
* sum - k = 6 - 3 = 3 → map\[3] = 1 ✅
* ✔️ Subarray found: `[3]`
* count += 1 → count = 2
* map = {0:1, 1:1, 3:1, 6:1}

---

### ✅ Step 3: i = 3, num = -3

* sum = 6 + (-3) = 3
* sum - k = 3 - 3 = 0 → map\[0] = 1 ✅
* ✔️ Subarray found: `[1, 2, 3, -3]`
* count += 1 → count = 3
* map = {0:1, 1:1, 3:2, 6:1}

---

### ✅ Step 4: i = 4, num = 1

* sum = 3 + 1 = 4
* sum - k = 4 - 3 = 1 → map\[1] = 1 ✅
* ✔️ Subarray found: `[2, 3, -3, 1]`
* count += 1 → count = 4
* map = {0:1, 1:1, 3:2, 4:1, 6:1}

---

### ✅ Step 5: i = 5, num = 1

* sum = 4 + 1 = 5
* sum - k = 5 - 3 = 2 → map\[2] = 0 ❌
* No subarray
* map = {0:1, 1:1, 3:2, 4:1, 5:1, 6:1}

---

### ✅ Step 6: i = 6, num = 1

* sum = 5 + 1 = 6
* sum - k = 6 - 3 = 3 → map\[3] = 2 ✅
* ✔️ 2 Subarrays found ending at index 6:

  * `[3, -3, 1, 1, 1]`
  * `[1, 1, 1]`
* count += 2 → count = 6
* map = {0:1, 1:1, 3:2, 4:1, 5:1, 6:2}

---

### 📊 Final Summary:

Total subarrays that sum to `k = 3`: **6**

### ✅ Subarrays:

1. `[1, 2]`
2. `[3]`
3. `[1, 2, 3, -3]`
4. `[2, 3, -3, 1]`
5. `[3, -3, 1, 1, 1]`
6. `[1, 1, 1]`

Let me know if you’d like to visualize this using array indices or want the exact code behind this!
